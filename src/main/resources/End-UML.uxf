<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.1.0">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>105</y>
      <w>215</w>
      <h>475</h>
    </coordinates>
    <panel_attributes>uk.ac.rhul.cs3821:MazeGenerator
Generate the maze randomly then solves it
--
*Attributes:*
-start: Cells
-end: Cells
-grid: Cells[][]
-brCorner: int[]
-tlCorner: int[]
-visited: Boolean[][]
-frame: JFrame
-panel: JPanel
-dimension: int
-gridSize: int
-rows: int
-cols: int
-colBeginning: int
-rowBeginning: int
-pathCount: int
-correctpathCount: int
-rand: double
-colour: Colour
--
*Operations*
&lt;&lt;constructor&gt;&gt; +MazeGenerator(gridSize: int)
&lt;&lt;constructor&gt;&gt; +MazeGenerator()
+mazeGen() 
                 {Exception=InvalidColor}
                 {Exception=Interrupted} 
+bfsSelected()
                 {Exception=InvalidColor}
                 {Exception=Interrupted}
+astarSelected()
                 {Exception=InvalidColor}
                 {Exception=Interrupted}
+dijkstrasSelected()
                 {Exception=InvalidColor}
                 {Exception=Interrupted}   
-dijkstras()
                 {Exception=InvalidColor}
                 {Exception=Interrupted} 
                 
-getNeighbour(row: int, col: int, dir: Direction): Cells
+astar()
                 {Exception=InvalidColor}
                 {Exception=Interrupted} 
                 
-manhattanHeuristics(cell:Cells, goal: Cells): int
-bfs()
                 {Exception=InvalidColor}
                 {Exception=Interrupted} 
-recBacktracking 
                 {Exception=InvalidColor}
	
-getIndex(cur: Cells): int[]
-reconstruct()
+findBrCorner(): int[]
+findTlCorner(): int[]
+getColorOfStart(): String
+getColorOfEnd(): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>235</x>
      <y>75</y>
      <w>210</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>&lt;&lt;view&gt;&gt;
uk.ac.rhul.cs3821::GuiView
Graphical Interface 
for the main menu with:
1) a text field for the grid size
2) a 'generate' button
3) a drop down menu for the search algorithms
4) a drop down menu for the creation algorithms
5) labels telling the user what algorithms theyve selected
--
*Attributes:*
-mg: MazeGenerator
-gridSize: int
-gridSizeInp: String
-mazeAlgs: ObservableList&lt;String&gt;
-solveAlgs: ObservableList&lt;String&gt;
_-instance: GuiView_
--
*Operations*
+gridSizeInp(event: KeyEvent)
+getGridSize(): int
+setGridSize(gridSize: int)
+setGridSizeInp(gridSizeInp: String)
+getGridSizeInp(): String
+close()
+getInstance(): GuiView
+initialize()
+generate(event: ActionEvent): 
                 {Exception=InvalidColor}
                 {Exception=Interrupted}
+checkInps(): boolean[]</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>165</y>
      <w>210</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>uk.ac.rhul.cs3821:Cells
Determines the walls of the maze
--
*Attributes:*
-sides: ArrayList&lt;Direction&gt;
-isWall: boolean
-visited: boolean
-end: Cells
-start: Cells
-colour: Colour
-prev: Cells
paths: boolean
cost: int
gscore: int
fscore: int
--
*Operations*
+getEnd(): Cells
+setEnd(Cells end)
+getStart(): Cells
+setStart(Cells start): int
+convertStringToColor(String col): Color
                                                       {Exception=InvalidColor} 
+convertColorToString(Color col): String 
                                                       {Exception=InvalidColor}
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>335</x>
      <y>355</y>
      <w>130</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
uk.ac.rhul.cs3821::Direction
A list of the types of 
directions of borders the cell can be on
--
_NORTH_
_SOUTH_
_EAST_
_WEST_
--
*Operations*
+toString(): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>485</x>
      <y>360</y>
      <w>50</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>1..4
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>330</y>
      <w>70</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>730</x>
      <y>230</y>
      <w>90</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>440</x>
      <y>150</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>395</y>
      <w>190</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>&lt;&lt;adapter&gt;&gt;
uk.ac.rhul.cs3821: Colour
Adapter class for the 
java.awt.Color library
--
*Operations:*
+convertStringToColor(String colour): Color
                                                       {Exception=InvalidColor} 
+convertColorToString(Color colour): String 
                                                       {Exception=InvalidColor}
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>905</x>
      <y>360</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
</diagram>
